[{"content":"A python library for adding extensions to SqlAlchemy (and/or Alembic) which allows declaratively stating the existence of additional kinds of objects about your database not natively supported by SqlAlchemy/Alembic.\n@declarative_database @as_declarative class Base: schemas = Schemas().are(\u0026#34;example\u0026#34;) roles = Roles(ignore_unspecified=True).are( Role(\u0026#34;read\u0026#34;, login=False), Role( \u0026#34;app\u0026#34;, in_roles=[\u0026#39;read\u0026#39;] ), ) grants = Grants().are( DefaultGrant.on_tables_in_schema(\u0026#34;public\u0026#34;, \u0026#39;example\u0026#39;).grant(\u0026#34;select\u0026#34;, to=\u0026#34;read\u0026#34;), DefaultGrant.on_tables_in_schema(\u0026#34;public\u0026#34;).grant(\u0026#34;insert\u0026#34;, \u0026#34;update\u0026#34;, \u0026#34;delete\u0026#34;, to=\u0026#34;write\u0026#34;), DefaultGrant.on_sequences_in_schema(\u0026#34;public\u0026#34;).grant(\u0026#34;usage\u0026#34;, to=\u0026#34;write\u0026#34;), ) rows = Rows().are( Row(\u0026#39;foo\u0026#39;, id=1), ) views = Views().are(View(\u0026#34;low_foo\u0026#34;, \u0026#34;select * from foo where i \u0026lt; 10\u0026#34;)) class Foo(Base): __tablename__ = \u0026#39;foo\u0026#39; id = Column(types.Integer(), primary_key=True) @view() class HighFoo: __tablename__ = \u0026#34;high_foo\u0026#34; __view__ = select(Foo.__table__).where(Foo.__table__.c.id \u0026gt;= 10) ","permalink":"https://dancardin.github.io/projects/sqlalchemy-declarative-extensions/","summary":"A python library for adding extensions to SqlAlchemy (and/or Alembic) which allows declaratively stating the existence of additional kinds of objects about your database not natively supported by SqlAlchemy/Alembic.\n@declarative_database @as_declarative class Base: schemas = Schemas().are(\u0026#34;example\u0026#34;) roles = Roles(ignore_unspecified=True).are( Role(\u0026#34;read\u0026#34;, login=False), Role( \u0026#34;app\u0026#34;, in_roles=[\u0026#39;read\u0026#39;] ), ) grants = Grants().are( DefaultGrant.on_tables_in_schema(\u0026#34;public\u0026#34;, \u0026#39;example\u0026#39;).grant(\u0026#34;select\u0026#34;, to=\u0026#34;read\u0026#34;), DefaultGrant.on_tables_in_schema(\u0026#34;public\u0026#34;).grant(\u0026#34;insert\u0026#34;, \u0026#34;update\u0026#34;, \u0026#34;delete\u0026#34;, to=\u0026#34;write\u0026#34;), DefaultGrant.on_sequences_in_schema(\u0026#34;public\u0026#34;).grant(\u0026#34;usage\u0026#34;, to=\u0026#34;write\u0026#34;), ) rows = Rows().are( Row(\u0026#39;foo\u0026#39;, id=1), ) views = Views().are(View(\u0026#34;low_foo\u0026#34;, \u0026#34;select * from foo where i \u0026lt; 10\u0026#34;)) class Foo(Base): __tablename__ = \u0026#39;foo\u0026#39; id = Column(types.","title":"SQLAlchemy Declarative Extensions"},{"content":"A Pytest plugin to test alembic migrations (with default tests) and which enables you to write tests specific to your migrations.\n$ pip install pytest-alembic $ pytest --test-alembic ... ::pytest_alembic/tests/model_definitions_match_ddl \u0026lt;- . PASSED [ 25%] ::pytest_alembic/tests/single_head_revision \u0026lt;- . PASSED [ 50%] ::pytest_alembic/tests/up_down_consistency \u0026lt;- . PASSED [ 75%] ::pytest_alembic/tests/upgrade \u0026lt;- . PASSED [100%] ============================== 4 passed in 2.32s =============================== ","permalink":"https://dancardin.github.io/projects/pytest-alembic/","summary":"A Pytest plugin to test alembic migrations (with default tests) and which enables you to write tests specific to your migrations.\n$ pip install pytest-alembic $ pytest --test-alembic ... ::pytest_alembic/tests/model_definitions_match_ddl \u0026lt;- . PASSED [ 25%] ::pytest_alembic/tests/single_head_revision \u0026lt;- . PASSED [ 50%] ::pytest_alembic/tests/up_down_consistency \u0026lt;- . PASSED [ 75%] ::pytest_alembic/tests/upgrade \u0026lt;- . PASSED [100%] ============================== 4 passed in 2.32s =============================== ","title":"Pytest Alembic"},{"content":"A python library which produces pytest fixtures which let you test against external resource (Postgres, Mongo, Redshift\u0026hellip;) dependent code, by orchestrating running real instances of those services.\nfrom pytest_mock_resources import create_postgres_fixture from models import ModelBase pg = create_postgres_fixture(ModelBase, session=True) def test_view_function_empty_db(pg): response = view_function(pg) assert response == ... ","permalink":"https://dancardin.github.io/projects/pytest-mock-resources/","summary":"A python library which produces pytest fixtures which let you test against external resource (Postgres, Mongo, Redshift\u0026hellip;) dependent code, by orchestrating running real instances of those services.\nfrom pytest_mock_resources import create_postgres_fixture from models import ModelBase pg = create_postgres_fixture(ModelBase, session=True) def test_view_function_empty_db(pg): response = view_function(pg) assert response == ... ","title":"Pytest Mock Resources"},{"content":"A tool to help manage context/project specific shell-things like environment variables.\n# Suppose you\u0026#39;ve got some directory structure ❯ mkdir -p projects/foo ❯ cd projects # In \u0026#34;projects\u0026#34;, you want some shorthand for quickly pushing your branches ❯ sauce new Created /Users/danc/.local/share/sauce/projects.toml ❯ sauce set alias push=\u0026#39;git push origin \u0026#34;$(git rev-parse --abbrev-ref HEAD)\u0026#34;\u0026#39; Setting push = git push origin \u0026#34;$(git rev-parse --abbrev-ref HEAD)\u0026#34; # Your project is, naturally, using 12-factor methodology, so you\u0026#39;ve got some # project specific environment variables you need to load! ❯ cd foo ❯ sauce set env foo=bar AWS_PROFILE=meow Setting foo = bar Setting AWS_PROFILE = meow # The core purpose! ❯ sauce Sourced ~/.local/share/sauce/projects/foo.toml ❯ env ... AWS_PROFILE=meow foo=bar ","permalink":"https://dancardin.github.io/projects/sauce/","summary":"A tool to help manage context/project specific shell-things like environment variables.\n# Suppose you\u0026#39;ve got some directory structure ❯ mkdir -p projects/foo ❯ cd projects # In \u0026#34;projects\u0026#34;, you want some shorthand for quickly pushing your branches ❯ sauce new Created /Users/danc/.local/share/sauce/projects.toml ❯ sauce set alias push=\u0026#39;git push origin \u0026#34;$(git rev-parse --abbrev-ref HEAD)\u0026#34;\u0026#39; Setting push = git push origin \u0026#34;$(git rev-parse --abbrev-ref HEAD)\u0026#34; # Your project is, naturally, using 12-factor methodology, so you\u0026#39;ve got some # project specific environment variables you need to load!","title":"Sauce"},{"content":"Databudgie is a CLI \u0026amp; library for database performing targeted backup and restore of database tables or arbitrary queries against database tables.\nSome minimal config might look like:\n# config.databudgie.yml backup: url: postgresql://postgres:postgres@localhost:5432/postgres restore: url: postgresql://postgres:postgres@localhost:5432/postgres tables: - some_schema.* - author - book - name: chapter query: \u0026#34;select * from {table} where book_id \u0026gt; 4\u0026#34; - name: some_table follow_foreign_keys: true Think pg_dump, but more flexible and easy to produce backups for a targeted set of tables/data, and restore them.\n","permalink":"https://dancardin.github.io/projects/databudgie/","summary":"Databudgie is a CLI \u0026amp; library for database performing targeted backup and restore of database tables or arbitrary queries against database tables.\nSome minimal config might look like:\n# config.databudgie.yml backup: url: postgresql://postgres:postgres@localhost:5432/postgres restore: url: postgresql://postgres:postgres@localhost:5432/postgres tables: - some_schema.* - author - book - name: chapter query: \u0026#34;select * from {table} where book_id \u0026gt; 4\u0026#34; - name: some_table follow_foreign_keys: true Think pg_dump, but more flexible and easy to produce backups for a targeted set of tables/data, and restore them.","title":"Databudgie"},{"content":"A python library which makes it easy to write factory functions for sqlalchemy models, particularly for use in testing.\nThe most obvious comparison is against the much more popular python library, FactoryBoy. By comparison, SQLAlchemy Model Factory removes a lot of the magic and machinery introduced by factory boy.\nOne essentially writes regular functions, (which are directly callable as functions!), which when called through the \u0026ldquo;ModelFactory\u0026rdquo; (mf by default) fixture, automatically produces those objects in the database, similarly to FactoryBoy.\n# tests/test_example_which_uses_pytest from sqlalchemy_model_factory import register_at from . import models @register_at(\u0026#39;widget\u0026#39;) def new_widget(name, weight, color, size, **etc): \u0026#34;\u0026#34;\u0026#34;My goal is to allow you to specify *all* the options a widget might require. \u0026#34;\u0026#34;\u0026#34; return Widget(name, weight, color, size, **etc) @register_at(\u0026#39;widget\u0026#39;, name=\u0026#39;default\u0026#39;) def new_default_widget(): \u0026#34;\u0026#34;\u0026#34;My goal is to give you a widget with as little input as possible. \u0026#34;\u0026#34;\u0026#34; return new_widget(name=\u0026#39;default_name\u0026#39;, weight=1, color=\u0026#39;rgb(1, 2, 3)\u0026#39;, size=4) def test_example_model(mf, session): widget1 = mf.widget.new(\u0026#39;name\u0026#39;, 1, \u0026#39;rgb(0, 0, 0)\u0026#39;, 1) widget2 = mf.widget.default() widgets = session.query(Widget).all() assert len(widgets) == 2 assert widgets[0].name == \u0026#39;name\u0026#39; assert widgets[1].id == widget2.id ","permalink":"https://dancardin.github.io/projects/sqlalchemy-model-factory/","summary":"A python library which makes it easy to write factory functions for sqlalchemy models, particularly for use in testing.\nThe most obvious comparison is against the much more popular python library, FactoryBoy. By comparison, SQLAlchemy Model Factory removes a lot of the magic and machinery introduced by factory boy.\nOne essentially writes regular functions, (which are directly callable as functions!), which when called through the \u0026ldquo;ModelFactory\u0026rdquo; (mf by default) fixture, automatically produces those objects in the database, similarly to FactoryBoy.","title":"SQLAlchemy Model Factory"},{"content":"A python library to simplify and centralize the loading of configuration, such as environment variables.\n# config.yml foo: bar: \u0026lt;% ENV[REQUIRED] %\u0026gt; baz: \u0026lt;% ENV[OPTIONAL, true] %\u0026gt; list_of_stuff: - fun\u0026lt;% ENV[NICE, dament] %\u0026gt;al - fun\u0026lt;% ENV[AGH, er] %\u0026gt;al # app.py config = Config.from_yaml(\u0026#39;config.yml\u0026#39;) print(config.foo.bar) print(config.foo[\u0026#39;baz\u0026#39;]) for item in config.list_of_stuff: print(item) ","permalink":"https://dancardin.github.io/projects/configly/","summary":"A python library to simplify and centralize the loading of configuration, such as environment variables.\n# config.yml foo: bar: \u0026lt;% ENV[REQUIRED] %\u0026gt; baz: \u0026lt;% ENV[OPTIONAL, true] %\u0026gt; list_of_stuff: - fun\u0026lt;% ENV[NICE, dament] %\u0026gt;al - fun\u0026lt;% ENV[AGH, er] %\u0026gt;al # app.py config = Config.from_yaml(\u0026#39;config.yml\u0026#39;) print(config.foo.bar) print(config.foo[\u0026#39;baz\u0026#39;]) for item in config.list_of_stuff: print(item) ","title":"Configly"},{"content":"A cog-like tool, written in Rust.\nStraight from Ned:\nCog is a file generation tool. It lets you use pieces of Python code as generators in your source files to generate whatever text you need.\nInstead, Corg allows one to choose any executable (python, bash, etc) which accepts piped input. Shown below, Corg uses a shebang-looking mechanism instead.\nThe most obvious motivating example which comes to mind for this tool is for keeping documentation up-to-date with their sources of truth. Be that, verifying CLI help text, or executing code examples.\n\u0026lt;!-- [[[#!/usr/bin/env bash cargo run --features cli -- --help ]]] --\u0026gt; ","permalink":"https://dancardin.github.io/projects/corg/","summary":"A cog-like tool, written in Rust.\nStraight from Ned:\nCog is a file generation tool. It lets you use pieces of Python code as generators in your source files to generate whatever text you need.\nInstead, Corg allows one to choose any executable (python, bash, etc) which accepts piped input. Shown below, Corg uses a shebang-looking mechanism instead.\nThe most obvious motivating example which comes to mind for this tool is for keeping documentation up-to-date with their sources of truth.","title":"corg"},{"content":"\u0026gt;\u0026gt;\u0026gt; asdf = [1, 2, 3, 4] \u0026gt;\u0026gt;\u0026gt; asdf[0:0] = [-1, 0] \u0026gt;\u0026gt;\u0026gt; asdf [-1, 0, 1, 2, 3, 4] Wat.\nThis little nugget is called \u0026ldquo;slice assignment\u0026rdquo; (so far as I know). It\u0026rsquo;s mutating the list, putting the contents of the right hand list into the left hand one.\nSlice assignment is a little used feature, probably likely because python does a pretty bad job of documenting a bunch of its syntactical features. I couldn\u0026rsquo;t find any PEPs referencing slice assignment, and there aren\u0026rsquo;t any obvious references in the docs either. If you search for \u0026ldquo;slice assignment\u0026rdquo;, you definitely get a bunch of results, just not from python itself.\nIt turns out that python lacks list methods or other options for efficiently altering lists beyond appending. You get [].append, and [].extend. Then you get [].insert, but no corresponding equivalent to extend. Alternatively, you could just live with unpacking or adding the two lists together and allocating a new one.\nBut it gets pretty funny. Python supports all sorts of extra slicing syntax options, that can be pretty useful normally.\nYou want the last item in a list? a[-1]. Nice, concise, clear!\nYou want the even indices from a list? a[::2]. Concise sure, arguably less clear until you know the synax, probably still ultimately nice.\nNow use those on the assignent side!\n\u0026gt;\u0026gt; a = [1, 2, 3, 4, 5, 6, 7, 8, 9] \u0026gt;\u0026gt;\u0026gt; a[::-2] = [-1, -2, -3, -4, -5] \u0026gt;\u0026gt;\u0026gt; a [-5, 2, -4, 4, -3, 6, -2, 8, -1] ","permalink":"https://dancardin.github.io/wats/python-slice-assignment/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easdf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easdf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easdf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Python Slice Assignment"},{"content":"\u0026gt;\u0026gt;\u0026gt; a = {\u0026#39;a\u0026#39;: {\u0026#39;b\u0026#39;: 4}} \u0026gt;\u0026gt;\u0026gt; \u0026#39;{a[\u0026#34;a\u0026#34;][\u0026#34;b\u0026#34;]}\u0026#39;.format(a=asdf) *** KeyError: \u0026#39;\u0026#34;a\u0026#34;\u0026#39; \u0026gt;\u0026gt;\u0026gt;\u0026#39;{a[a][b]}\u0026#39;.format(a=asdf) \u0026#39;4\u0026#39; Wat.\nIt turns out this is documented briefly in PEP-498, although apparently not at all in the official docs.\nThere is one small difference between the limited expressions allowed in str.format() and the full expressions allowed inside f-strings. The difference is in how index lookups are performed. In str.format(), index values that do not look like numbers are converted to strings\nEssentially it boils down to the fact that fstrings take advantage of python\u0026rsquo;s actual parser, and therefore have syntax consistent with the rest of the language, whereas str.format is approximating regular python syntax by reimplementing some common access patterns in a mini lookalike-dsl.\nAnd indeed if you attempt the same thing with an fstring:\n\u0026gt;\u0026gt;\u0026gt; f\u0026#39;{a[\u0026#34;a\u0026#34;][\u0026#34;b\u0026#34;]}\u0026#39; *** \u0026#39;4\u0026#39; While some people may look at that and find the behavior unsurprising, I personally think it looks like an unfortunate footgun that one would be forgiven to think had different semantics than it has.\nI can see what they were probably thinking at the time:\nThere\u0026rsquo;s going to be some additional complexity in parsing the extra syntax to support a[\u0026quot;a\u0026quot;] What would a[b] even mean? Presumably b would have to be some additional str.format argument? (It gets a bit weird because it\u0026rsquo;s not capturing local variables like fstrings do). Given the above, why force the user to type quotes all the time? My hot take is that it\u0026rsquo;s fine for str.format to not attempt to support arbitrary python syntax, but that what it does support should have identical semantics. I.e. I should be able to copy that portion of the format string out of the string and it should behave the same.\n","permalink":"https://dancardin.github.io/wats/python-formatting/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e{a[\u0026#34;a\u0026#34;][\u0026#34;b\u0026#34;]}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003easdf\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e***\u003c/span\u003e \u003cspan class=\"ne\"\u003eKeyError\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#34;a\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e{a[a][b]}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003easdf\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\u0026#39;4\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Python Formatting"},{"content":"[1,2,3,4,].length // 4 [1,2,3,4,,].length // 5 27.toString() // Uncaught SyntaxError: Invalid or unexpected token 27..toString() // \u0026#39;27\u0026#39; Wat.\nIn the former example, [1,2,3,4,,], I simply dont understand the rationale. Why is this not a syntax error!? 🤯\nIn the latter, 27.toString() // Uncaught SyntaxError: Invalid or unexpected token. Okay fine, not all languages support using attribute lookups on literal values like integers. Take python, for example:\n\u0026gt;\u0026gt;\u0026gt; 1.__str__() File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1 1.__str__() ^ SyntaxError: invalid syntax \u0026gt;\u0026gt;\u0026gt; (1).__str__() \u0026gt;\u0026gt;\u0026gt; x = 1 \u0026gt;\u0026gt;\u0026gt; x.__str__() # Admittedly there\u0026#39;s not a huge amount you can call on an int, necessarily. But still! # Contrast it with something like `\u0026#34;\u0026#34;.join`, and it starts to look weird! And that\u0026rsquo;s somewhat sad because other languages do support this kind of thing (like Rust), and i think it ends up looking a lot more natural than the alternatives you get in languages that dont support it.\nBut back to javascript 27..toString() // '27'\u0026hellip;wat again!?\nJavascript has all sorts of weird runtime semantics that people meme about. The implicit coersions, the insane equality map, etc. But things like these should literally just be syntax errors, and I dont understand why they\u0026rsquo;re not!\n","permalink":"https://dancardin.github.io/wats/javascript-oddities/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,].\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,,].\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"mf\"\u003e27.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Uncaught SyntaxError: Invalid or unexpected token\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"mf\"\u003e27.\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#39;27\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Javascript Syntax"}]